buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
}

version = "1.8.9-1.8.1beta6"
def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}
version += "-SNAPSHOT"

group= "com.github.mcjty" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mcjtylib"

sourceCompatibility = 1.8
targetCompatibility = 1.8


minecraft {
    version = "1.8.9-11.15.0.1674"
    runDir = "run"
    mappings = "snapshot_20151216"
    useDepAts = true
}

dependencies {
    deobfCompile "mcp.mobius.waila:Waila:1.6.0-B3_1.8.8"
    deobfCompile "mezz.jei:jei_1.8.8:2.8.3.39"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

uploadArchives() {
        repositories {
            logger.info('Publishing to files server')

            mavenDeployer {
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                addFilter('dev') {artifact, file ->
                    artifact.attributes['classifier'] == 'dev'
                }
                addFilter('sources') {artifact, file ->
                    artifact.attributes['classifier'] == 'sources'
                }

                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'Common library for McJty mods (RFTools, Deep Resonance)'
                        url 'https://github.com/McJty/McJtyLib'

                        scm {
                            url 'scm:git:git@github.com:McJty/McJtyLib.git'
                            connection 'scm:git:git@github.com:McJty/McJtyLib.git'
                            developerConnection 'scm:git:git@github.com:McJty/McJtyLib.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/McJty/McJtyLib/issues'
                        }

                        developers {
                            developer {
                                id 'McJty'
                                name 'McJty'
                                roles { role 'developer' }
                            }
                            developer {
                                id 'Elec332'
                                name 'Elec332'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
